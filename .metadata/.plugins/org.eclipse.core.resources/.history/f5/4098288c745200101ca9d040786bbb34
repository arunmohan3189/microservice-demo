package com.example.Accounts.iservice.serviceimpl;

import java.util.Optional;
import java.util.Random;

import org.springframework.stereotype.Service;

import com.example.Accounts.constants.AccountConstants;
import com.example.Accounts.dto.AccountsDto;
import com.example.Accounts.dto.CustomerDto;
import com.example.Accounts.entity.Account;
import com.example.Accounts.entity.Customer;
import com.example.Accounts.exception.CustomerAlreadyExitException;
import com.example.Accounts.exception.ResourceNotFoundException;
import com.example.Accounts.iservice.IAccountService;
import com.example.Accounts.objectMapper.AccountsMapper;
import com.example.Accounts.objectMapper.CustomerMapper;
import com.example.Accounts.repository.AccountsRepository;
import com.example.Accounts.repository.CustomerRepository;

import lombok.AllArgsConstructor;

@Service
@AllArgsConstructor
public class AccountServiceImpl implements IAccountService {

	private AccountsRepository accountsRepository;
	private CustomerRepository customerRepository;

	@Override
	public void createAccount(CustomerDto customerDto) {

		Optional<Customer> optionalCustomer = customerRepository.findByMobileNumber(customerDto.getMobileNumber());
		if (optionalCustomer.isPresent()) {
			throw new CustomerAlreadyExitException(
					"Customer Already Exit for Given Mobile Number : " + customerDto.getMobileNumber());
		}
		Customer customer = CustomerMapper.mapToCustomer(customerDto, new Customer());
		customerRepository.save(customer);
		accountsRepository.save(createNewAccount(customer));

	}

	private Account createNewAccount(Customer customer) {
		Account newAccount = new Account();
		newAccount.setCustomerId(customer.getCustomerId());
		long randomAccNumber = 1000000000L + new Random().nextInt(900000000);

		newAccount.setAccountNumber(randomAccNumber);
		newAccount.setAccountType(AccountConstants.SAVINGS);
		newAccount.setBranchAddress(AccountConstants.ADDRESS);
		return newAccount;
	}

	@Override
	public CustomerDto fetchCustomerInfo(String mobileNumber) {
		Customer customer = customerRepository.findByMobileNumber(mobileNumber)
				.orElseThrow(() -> new ResourceNotFoundException("Customer", mobileNumber, mobileNumber));
		Account account = accountsRepository.findByCustomerId(customer.getCustomerId());
		CustomerDto customerDto = CustomerMapper.mapToCustomerDto(customer, new CustomerDto());
		customerDto.setAccountsDto(AccountsMapper.mapToAccountsDto(account, new AccountsDto()));
		return customerDto;
	}

	@Override
	public boolean updateCustomer(CustomerDto customerDto) {
		boolean isUpdate = false;
		AccountsDto accountDto = customerDto.getAccountsDto();
		if (accountDto != null) {
			Optional<Account> optionalAccount = accountsRepository.findByAccountNumber(accountDto.getAccountNumber());
			Account accountOpt = optionalAccount.orElseThrow(() -> new ResourceNotFoundException("Account",
					"AccountNumber", accountDto.getAccountNumber().toString()));
			Account account = AccountsMapper.mapToAccount(accountDto, accountOpt);
			accountsRepository.save(account);

			Long customerId = account.getCustomerId();
			Customer customer = customerRepository.findById(customerId).orElseThrow(
					() -> new ResourceNotFoundException("Customer", "CustomerId", account.getCustomerId().toString()));
			
			 CustomerMapper.mapToCustomer(customerDto, customer);
			customerRepository.save(customer);
			isUpdate = true;
		}

		return isUpdate;
	}

	@Override
	public void deleteAccount(String mobileNumber) {
		
	Optional<Customer> optionalCustomer =	customerRepository.findByMobileNumber(mobileNumber);
	
	Customer customer = optionalCustomer.orElseThrow(() -> new ResourceNotFoundException("Account", mobileNumber, mobileNumber));
	
		
	}

}
